module.exports = (grunt) ->
  c = undefined
  taskName = undefined
  for taskName of grunt.file.readJSON('package.json').devDependencies
    `taskName = taskName`
    if taskName != 'grunt' && taskName != 'nib' && taskName != 'request' && taskName != 'stylus'
      grunt.loadNpmTasks taskName
      # console.log taskName

  grunt.initConfig
    notify:
      success: options:
        title: 'SUCCESS'
        message: 'SUCCESS'
      cssCompile: options:
        title: 'CSS'
        message: 'OK !!'
      jsCompile: options:
        title: 'JS'
        message: 'OK !!'
    stylus:
      test :
        files: [ {
          expand: true
          cwd: 'src/stylus/'
          src: [
            'layout.styl'
          ]
          dest: 'src/css/'
          ext: '.css'
        } ]
        options:
          sourcemap: 'none'
          compress : true
          lineNumbers: true

    concat:
      css_common: files: [ {
        src: [
          '_src/css/common/layout.css'
        ]
        dest: '<%= dirs.common.outcss %>/common.css'
      } ]
      css_template: files: [ {
        src: [
          '_src/css/template/template.css'
        ]
        dest: '<%= dirs.template.outcss %>/common.css'
      } ]
      js_common: files: [ {
        src  : 'src/js/common.js'
        dest : 'out/js/common.js'
      } ]

    combine_mq:
      common:
        options:
          beautify: false
        src: 'src/css/layout.css'
        dest: 'out/css/layout.css'
    cssmin:
      common:
        src: [ '_src/css/common/layout.css' ]
        dest: '_src/css/common/layout.min.css'
        options: ConvertLevel3AtKeyframes: false
      template:
        src: [ '_src/css/template/template.css' ]
        dest: '_src/css/template/template.min.css'
        options: ConvertLevel3AtKeyframes: false
    uglify: pc: files: [ {
      expand: true
      cwd: 'info/common/js/'
      src: [ '*.js' ]
      dest: 'info/common/js/'
      ext: '.js'
    } ]

  ### initConfig ###

  ###*
  # ファイルの変更を監視する
  # DOC : https://github.com/gruntjs/grunt-contrib-watch
  #
  # memo : 通常の指定方法の場合、複数項目の同時監視ができないため（すべて監視はできるけど‥）、設定を変更する方法で実装しています
  #        参考 : http://stackoverflow.com/questions/17585385/how-to-run-two-grunt-watch-tasks-simultaneously
  #
  ###

  #-------------------- 通常
  grunt.registerTask 'watch:common', ->
    # Configuration for watch:test tasks.
    config =
      css_dev:
        files: [
          'src/stylus/layout.styl'
          'src/stylus/modules/*.styl'
        ]
        tasks: [ 'css_dev' ]
      js_dev:
        files: 'src/js/*.js'
        tasks: [ 'js_dev' ]
      options:
        spawn: false
    grunt.config 'watch', config
    grunt.task.run 'watch'
    return


  ###----------------------

   GruntのTaskを登録する

   // memo : grunt.task.registerTask(taskName, taskListArr)
   // Docs : http://gruntjs.com/api/grunt.task#grunt.task.registertask

   ----------------------
  ###

  # grunt.registerTask("sp_nouhin", ["cssmin:sp","uglify:sp"]);
  #-------------------- PC版
  # 圧縮処理は行いません（全ファイル）

  grunt.registerTask 'default', [
    'css_dev'
    'js_dev'
    'watch:common'
  ]
  grunt.registerTask 'common', [ 'default' ]

  grunt.registerTask "css_dev", [
    'stylus'
    'combine_mq'
    "notify:cssCompile"
  ]
  grunt.registerTask "js_dev", [
    'concat:js_common'
    "notify:jsCompile"
  ]




  return

###----------------------
 開発用メモ

 // CSSの処理フロー

 （Debug用）Sassに変換 → cssに変換 → 結合(comcat)して本番Dirに書きだし
 （納品用）Sassに変換 → cssに変換 → 圧縮して本番Dirに書きだし

 // jsの処理フロー
 （libs書きだし） ライブラリを追加したときのみ（更新頻度低いため、手動更新のみを想定） grunt concat:js_libs を実行する
 （Debug用）jsを結合(comcat)
 （納品用）uglify

/--------------------
###

# ---
# generated by js2coffee 2.0.1